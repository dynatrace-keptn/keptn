// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db_mock

import (
	"sync"
)

// EventsDbOperationsMock is a mock implementation of db.EventsDbOperations.
//
// 	func TestSomethingThatUsesEventsDbOperations(t *testing.T) {
//
// 		// make and configure a mocked db.EventsDbOperations
// 		mockedEventsDbOperations := &EventsDbOperationsMock{
// 			UpdateEventOfServiceFunc: func(event interface{}, eventType string, keptnContext string, eventID string, triggeredID string) error {
// 				panic("mock out the UpdateEventOfService method")
// 			},
// 			UpdateShipyardFunc: func(projectName string, shipyardContent string) error {
// 				panic("mock out the UpdateShipyard method")
// 			},
// 		}
//
// 		// use mockedEventsDbOperations in code that requires db.EventsDbOperations
// 		// and then make assertions.
//
// 	}
type EventsDbOperationsMock struct {
	// UpdateEventOfServiceFunc mocks the UpdateEventOfService method.
	UpdateEventOfServiceFunc func(event interface{}, eventType string, keptnContext string, eventID string, triggeredID string) error

	// UpdateShipyardFunc mocks the UpdateShipyard method.
	UpdateShipyardFunc func(projectName string, shipyardContent string) error

	// calls tracks calls to the methods.
	calls struct {
		// UpdateEventOfService holds details about calls to the UpdateEventOfService method.
		UpdateEventOfService []struct {
			// Event is the event argument value.
			Event interface{}
			// EventType is the eventType argument value.
			EventType string
			// KeptnContext is the keptnContext argument value.
			KeptnContext string
			// EventID is the eventID argument value.
			EventID string
			// TriggeredID is the triggeredID argument value.
			TriggeredID string
		}
		// UpdateShipyard holds details about calls to the UpdateShipyard method.
		UpdateShipyard []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// ShipyardContent is the shipyardContent argument value.
			ShipyardContent string
		}
	}
	lockUpdateEventOfService sync.RWMutex
	lockUpdateShipyard       sync.RWMutex
}

// UpdateEventOfService calls UpdateEventOfServiceFunc.
func (mock *EventsDbOperationsMock) UpdateEventOfService(event interface{}, eventType string, keptnContext string, eventID string, triggeredID string) error {
	if mock.UpdateEventOfServiceFunc == nil {
		panic("EventsDbOperationsMock.UpdateEventOfServiceFunc: method is nil but EventsDbOperations.UpdateEventOfService was just called")
	}
	callInfo := struct {
		Event        interface{}
		EventType    string
		KeptnContext string
		EventID      string
		TriggeredID  string
	}{
		Event:        event,
		EventType:    eventType,
		KeptnContext: keptnContext,
		EventID:      eventID,
		TriggeredID:  triggeredID,
	}
	mock.lockUpdateEventOfService.Lock()
	mock.calls.UpdateEventOfService = append(mock.calls.UpdateEventOfService, callInfo)
	mock.lockUpdateEventOfService.Unlock()
	return mock.UpdateEventOfServiceFunc(event, eventType, keptnContext, eventID, triggeredID)
}

// UpdateEventOfServiceCalls gets all the calls that were made to UpdateEventOfService.
// Check the length with:
//     len(mockedEventsDbOperations.UpdateEventOfServiceCalls())
func (mock *EventsDbOperationsMock) UpdateEventOfServiceCalls() []struct {
	Event        interface{}
	EventType    string
	KeptnContext string
	EventID      string
	TriggeredID  string
} {
	var calls []struct {
		Event        interface{}
		EventType    string
		KeptnContext string
		EventID      string
		TriggeredID  string
	}
	mock.lockUpdateEventOfService.RLock()
	calls = mock.calls.UpdateEventOfService
	mock.lockUpdateEventOfService.RUnlock()
	return calls
}

// UpdateShipyard calls UpdateShipyardFunc.
func (mock *EventsDbOperationsMock) UpdateShipyard(projectName string, shipyardContent string) error {
	if mock.UpdateShipyardFunc == nil {
		panic("EventsDbOperationsMock.UpdateShipyardFunc: method is nil but EventsDbOperations.UpdateShipyard was just called")
	}
	callInfo := struct {
		ProjectName     string
		ShipyardContent string
	}{
		ProjectName:     projectName,
		ShipyardContent: shipyardContent,
	}
	mock.lockUpdateShipyard.Lock()
	mock.calls.UpdateShipyard = append(mock.calls.UpdateShipyard, callInfo)
	mock.lockUpdateShipyard.Unlock()
	return mock.UpdateShipyardFunc(projectName, shipyardContent)
}

// UpdateShipyardCalls gets all the calls that were made to UpdateShipyard.
// Check the length with:
//     len(mockedEventsDbOperations.UpdateShipyardCalls())
func (mock *EventsDbOperationsMock) UpdateShipyardCalls() []struct {
	ProjectName     string
	ShipyardContent string
} {
	var calls []struct {
		ProjectName     string
		ShipyardContent string
	}
	mock.lockUpdateShipyard.RLock()
	calls = mock.calls.UpdateShipyard
	mock.lockUpdateShipyard.RUnlock()
	return calls
}
